# build larsoft

basequal=${1}

#require_buildfw_version 6.00.00 || return
  if version_greater \
   6.00.00     v$(print_version | sed -e 's&^.*[ \t]\{1,\}&&' -e 's&\.&_&g' ); then
    echo "Need buildFW 6.00.00 or better." 1>&2
    return 1
  fi

# specify version to bootstrap and setup ups
check_ups @UPS_VERSION@

build_bundle larbase-@LARDIST_DOT_VERSION@ ${basequal}
status=$?
if (( ${status} != 0)); then
  cat 1>&2 <<EOF
Build of larbase-@LARDIST_DOT_VERSION@ bundle failed with status ${status}
EOF
  return ${status}
fi

build_bundle larsoftobj-@LARSOFTOBJ_DOT_VERSION@ ${basequal}
status=$?
if (( ${status} != 0)); then
  cat 1>&2 <<EOF
Build of larsoftobj-@LARSOFTOBJ_DOT_VERSION@ bundle failed with status ${status}
EOF
  return ${status}
fi

build_cet -G LArSoft larpandoracontent @LARPANDORACONTENT_VERSION@ ${basequal}

# using cvmfs spack packages because we cannot reproduce previous spack installs
echo
export PRODUCTS=$PRODUCTS:/cvmfs/larsoft.opensciencegrid.org/packages
echo "PRODUCTS: $PRODUCTS"
echo

# larcore tests disabled because of Jenkins build slave problems
build_cet -G LArSoft -n larcore @LARCORE_VERSION@ ${basequal}
build_cet -G LArSoft lardata @LARDATA_VERSION@ ${basequal}
build_cet -G LArSoft larevt @LAREVT_VERSION@ ${basequal}
build_cet -G LArSoft larg4 @LARG4_VERSION@ ${basequal}
build_cet -f NULL -G LArSoft larfinder @LARFINDER_VERSION@
build_cet -G LArSoft larsim @LARSIM_VERSION@ ${basequal}
build_cet -G LArSoft larsimrad @LARSIMRAD_VERSION@ ${basequal}
build_cet -G LArSoft larsimdnn @LARSIMDNN_VERSION@ ${basequal}
build_cet -G LArSoft larreco @LARRECO_VERSION@ ${basequal}
build_cet -G LArSoft larrecodnn @LARRECODNN_VERSION@ ${basequal}
# the single larana test likes to hang on Jenkins macOS build slaves
build_cet -G LArSoft -n larana @LARANA_VERSION@ ${basequal}
build_cet -G LArSoft larpandora @LARPANDORA_VERSION@ ${basequal}
build_cet -G LArSoft larwirecell @LARWIRECELL_VERSION@ ${basequal}
build_cet -G LArSoft larexamples @LAREXAMPLES_VERSION@ ${basequal}
build_cet -G LArSoft lareventdisplay @LAREVENTDISPLAY_VERSION@ ${basequal}
build_cet -G LArSoft larsoft @LARSOFT_VERSION@ ${basequal}
##build_cet -G LArSoft webevd @WEBEVD_VERSION@ ${basequal}
# do not distribute larbatch or larutils with a release candidate
build_cet -f NULL -G LArSoft larbatch @LARBATCH_VERSION@
build_cet -f NULL -G LArSoft larutils @LARUTILS_VERSION@

return 0
