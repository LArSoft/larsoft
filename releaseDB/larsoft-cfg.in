# build larsoft

basequal=${1}

# specify version to bootstrap and setup ups
check_ups v6_1_1

build_bundle larbase-@LARSOFT_DOT_VERSION@ ${basequal}
status=$?
if (( ${status} != 0)); then
  cat 1>&2 <<EOF
Build of larbase-@LARSOFT_DOT_VERSION@ bundle failed with status ${status}
EOF
  return ${status}
fi

build_bundle larsoftobj-@LARSOFTOBJ_DOT_VERSION@ ${basequal}
status=$?
if (( ${status} != 0)); then
  cat 1>&2 <<EOF
Build of larsoftobj-@LARSOFTOBJ_DOT_VERSION@ bundle failed with status ${status}
EOF
  return ${status}
fi

ensure_cetbuildtools v7_03_02

save_build_type=${build_type}
if [ x${build_type} = xdebug ]; then
  build_type=prof
fi
do_build pybind11 @PYBIND11_VERSION@
do_build protobuf @PROTOBUF_VERSION@ ${basequal}
do_build openblas @OPENBLAS_VERSION@ ${basequal}
do_build libtorch @LIBTORCH_VERSION@ ${basequal}
build_type=${save_build_type}

build_cet ppfx @PPFX_VERSION@ ${basequal}
build_cet -G LArSoft larpandoracontent @LARPANDORACONTENT_VERSION@ ${basequal}

# larcore tests disabled because of Jenkins build slave problems
build_cet artg4tk @ARTG4TK_VERSION@ ${basequal}
build_cet -G LArSoft -n larcore @LARCORE_VERSION@ ${basequal}
build_cet -G LArSoft lardata @LARDATA_VERSION@ ${basequal}
build_cet -G LArSoft larevt @LAREVT_VERSION@ ${basequal}
build_cet -G LArSoft larsim @LARSIM_VERSION@ ${basequal}
build_cet -G LArSoft larg4 @LARG4_VERSION@ ${basequal}
build_cet -G LArSoft larreco @LARRECO_VERSION@ ${basequal}
# the single larana test likes to hang on Jenkins macOS build slaves
build_cet -G LArSoft -n larana @LARANA_VERSION@ ${basequal}
build_cet -G LArSoft larpandora @LARPANDORA_VERSION@ ${basequal}
build_cet -G LArSoft larwirecell @LARWIRECELL_VERSION@ ${basequal}
build_cet -G LArSoft larexamples @LAREXAMPLES_VERSION@ ${basequal}
build_cet -G LArSoft lareventdisplay @LAREVENTDISPLAY_VERSION@ ${basequal}
build_cet -G LArSoft larsoft @LARSOFT_VERSION@ ${basequal}
##build_cet_null larbatch @LARBATCH_VERSION@
##build_cet_null larutils @LARUTILS_VERSION@

return 0
